// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

#include "precomp.h"
#include "inc/CodepointWidthDetector.hpp"

// Due to the Feature_Graphemes::IsEnabled() feature flagging, some code may be disabled.
#pragma warning(disable : 4702) // unreachable code

// I was trying to minimize dependencies in this code so that it's easier to port to other terminal applications.
// Also, it has to be fast / have minimal overhead, since it potentially parses every single input character.
#pragma warning(disable : 26446) // Prefer to use gsl::at() instead of unchecked subscript operator (bounds.4).
#pragma warning(disable : 26472) // Don't use a static_cast for arithmetic conversions. Use brace initialization, gsl::narrow_cast or gsl::narrow (type.1).
#pragma warning(disable : 26482) // Only index into arrays using constant expressions (bounds.2).

namespace
{
    // used to store range data in CodepointWidthDetector's internal map
    struct UnicodeRange final
    {
        char32_t lowerBound;
        char32_t upperBound : 31;
        char32_t isAmbiguous : 1;
    };

    static bool operator<(const UnicodeRange& range, const unsigned int searchTerm) noexcept
    {
        return range.upperBound < searchTerm;
    }

    // Generated by Generate-CodepointWidthsFromUCD.ps1 -Pack:True -Full: -NoOverrides:False
    // on 2024-03-20 12:57:23Z from Unicode 15.1.0.
    // 321154 (0x4E682) codepoints covered.
    // 240 (0xF0) codepoints overridden.
    // Override path: .\src\types\unicode_width_overrides.xml
    static constexpr std::array<UnicodeRange, 296> s_wideAndAmbiguousTable{
        UnicodeRange{ 0xa1, 0xa1, 1 },
        UnicodeRange{ 0xa4, 0xa4, 1 },
        UnicodeRange{ 0xa7, 0xa8, 1 },
        UnicodeRange{ 0xaa, 0xaa, 1 },
        UnicodeRange{ 0xad, 0xae, 1 },
        UnicodeRange{ 0xb0, 0xb4, 1 },
        UnicodeRange{ 0xb6, 0xba, 1 },
        UnicodeRange{ 0xbc, 0xbf, 1 },
        UnicodeRange{ 0xc6, 0xc6, 1 },
        UnicodeRange{ 0xd0, 0xd0, 1 },
        UnicodeRange{ 0xd7, 0xd8, 1 },
        UnicodeRange{ 0xde, 0xe1, 1 },
        UnicodeRange{ 0xe6, 0xe6, 1 },
        UnicodeRange{ 0xe8, 0xea, 1 },
        UnicodeRange{ 0xec, 0xed, 1 },
        UnicodeRange{ 0xf0, 0xf0, 1 },
        UnicodeRange{ 0xf2, 0xf3, 1 },
        UnicodeRange{ 0xf7, 0xfa, 1 },
        UnicodeRange{ 0xfc, 0xfc, 1 },
        UnicodeRange{ 0xfe, 0xfe, 1 },
        UnicodeRange{ 0x101, 0x101, 1 },
        UnicodeRange{ 0x111, 0x111, 1 },
        UnicodeRange{ 0x113, 0x113, 1 },
        UnicodeRange{ 0x11b, 0x11b, 1 },
        UnicodeRange{ 0x126, 0x127, 1 },
        UnicodeRange{ 0x12b, 0x12b, 1 },
        UnicodeRange{ 0x131, 0x133, 1 },
        UnicodeRange{ 0x138, 0x138, 1 },
        UnicodeRange{ 0x13f, 0x142, 1 },
        UnicodeRange{ 0x144, 0x144, 1 },
        UnicodeRange{ 0x148, 0x14b, 1 },
        UnicodeRange{ 0x14d, 0x14d, 1 },
        UnicodeRange{ 0x152, 0x153, 1 },
        UnicodeRange{ 0x166, 0x167, 1 },
        UnicodeRange{ 0x16b, 0x16b, 1 },
        UnicodeRange{ 0x1ce, 0x1ce, 1 },
        UnicodeRange{ 0x1d0, 0x1d0, 1 },
        UnicodeRange{ 0x1d2, 0x1d2, 1 },
        UnicodeRange{ 0x1d4, 0x1d4, 1 },
        UnicodeRange{ 0x1d6, 0x1d6, 1 },
        UnicodeRange{ 0x1d8, 0x1d8, 1 },
        UnicodeRange{ 0x1da, 0x1da, 1 },
        UnicodeRange{ 0x1dc, 0x1dc, 1 },
        UnicodeRange{ 0x251, 0x251, 1 },
        UnicodeRange{ 0x261, 0x261, 1 },
        UnicodeRange{ 0x2c4, 0x2c4, 1 },
        UnicodeRange{ 0x2c7, 0x2c7, 1 },
        UnicodeRange{ 0x2c9, 0x2cb, 1 },
        UnicodeRange{ 0x2cd, 0x2cd, 1 },
        UnicodeRange{ 0x2d0, 0x2d0, 1 },
        UnicodeRange{ 0x2d8, 0x2db, 1 },
        UnicodeRange{ 0x2dd, 0x2dd, 1 },
        UnicodeRange{ 0x2df, 0x2df, 1 },
        UnicodeRange{ 0x300, 0x36f, 1 },
        UnicodeRange{ 0x391, 0x3a1, 1 },
        UnicodeRange{ 0x3a3, 0x3a9, 1 },
        UnicodeRange{ 0x3b1, 0x3c1, 1 },
        UnicodeRange{ 0x3c3, 0x3c9, 1 },
        UnicodeRange{ 0x401, 0x401, 1 },
        UnicodeRange{ 0x410, 0x44f, 1 },
        UnicodeRange{ 0x451, 0x451, 1 },
        UnicodeRange{ 0x1100, 0x115f, 0 },
        UnicodeRange{ 0x2010, 0x2010, 1 },
        UnicodeRange{ 0x2013, 0x2016, 1 },
        UnicodeRange{ 0x2018, 0x2019, 1 },
        UnicodeRange{ 0x201c, 0x201d, 1 },
        UnicodeRange{ 0x2020, 0x2022, 1 },
        UnicodeRange{ 0x2024, 0x2027, 1 },
        UnicodeRange{ 0x2030, 0x2030, 1 },
        UnicodeRange{ 0x2032, 0x2033, 1 },
        UnicodeRange{ 0x2035, 0x2035, 1 },
        UnicodeRange{ 0x203b, 0x203b, 1 },
        UnicodeRange{ 0x203e, 0x203e, 1 },
        UnicodeRange{ 0x2074, 0x2074, 1 },
        UnicodeRange{ 0x207f, 0x207f, 1 },
        UnicodeRange{ 0x2081, 0x2084, 1 },
        UnicodeRange{ 0x20ac, 0x20ac, 1 },
        UnicodeRange{ 0x2103, 0x2103, 1 },
        UnicodeRange{ 0x2105, 0x2105, 1 },
        UnicodeRange{ 0x2109, 0x2109, 1 },
        UnicodeRange{ 0x2113, 0x2113, 1 },
        UnicodeRange{ 0x2116, 0x2116, 1 },
        UnicodeRange{ 0x2121, 0x2122, 1 },
        UnicodeRange{ 0x2126, 0x2126, 1 },
        UnicodeRange{ 0x212b, 0x212b, 1 },
        UnicodeRange{ 0x2153, 0x2154, 1 },
        UnicodeRange{ 0x215b, 0x215e, 1 },
        UnicodeRange{ 0x2160, 0x216b, 1 },
        UnicodeRange{ 0x2170, 0x2179, 1 },
        UnicodeRange{ 0x2189, 0x2189, 1 },
        UnicodeRange{ 0x2190, 0x2199, 1 },
        UnicodeRange{ 0x21b8, 0x21b9, 1 },
        UnicodeRange{ 0x21d2, 0x21d2, 1 },
        UnicodeRange{ 0x21d4, 0x21d4, 1 },
        UnicodeRange{ 0x21e7, 0x21e7, 1 },
        UnicodeRange{ 0x2200, 0x2200, 1 },
        UnicodeRange{ 0x2202, 0x2203, 1 },
        UnicodeRange{ 0x2207, 0x2208, 1 },
        UnicodeRange{ 0x220b, 0x220b, 1 },
        UnicodeRange{ 0x220f, 0x220f, 1 },
        UnicodeRange{ 0x2211, 0x2211, 1 },
        UnicodeRange{ 0x2215, 0x2215, 1 },
        UnicodeRange{ 0x221a, 0x221a, 1 },
        UnicodeRange{ 0x221d, 0x2220, 1 },
        UnicodeRange{ 0x2223, 0x2223, 1 },
        UnicodeRange{ 0x2225, 0x2225, 1 },
        UnicodeRange{ 0x2227, 0x222c, 1 },
        UnicodeRange{ 0x222e, 0x222e, 1 },
        UnicodeRange{ 0x2234, 0x2237, 1 },
        UnicodeRange{ 0x223c, 0x223d, 1 },
        UnicodeRange{ 0x2248, 0x2248, 1 },
        UnicodeRange{ 0x224c, 0x224c, 1 },
        UnicodeRange{ 0x2252, 0x2252, 1 },
        UnicodeRange{ 0x2260, 0x2261, 1 },
        UnicodeRange{ 0x2264, 0x2267, 1 },
        UnicodeRange{ 0x226a, 0x226b, 1 },
        UnicodeRange{ 0x226e, 0x226f, 1 },
        UnicodeRange{ 0x2282, 0x2283, 1 },
        UnicodeRange{ 0x2286, 0x2287, 1 },
        UnicodeRange{ 0x2295, 0x2295, 1 },
        UnicodeRange{ 0x2299, 0x2299, 1 },
        UnicodeRange{ 0x22a5, 0x22a5, 1 },
        UnicodeRange{ 0x22bf, 0x22bf, 1 },
        UnicodeRange{ 0x2312, 0x2312, 1 },
        UnicodeRange{ 0x231a, 0x231b, 0 },
        UnicodeRange{ 0x2329, 0x232a, 0 },
        UnicodeRange{ 0x23e9, 0x23ec, 0 },
        UnicodeRange{ 0x23f0, 0x23f0, 0 },
        UnicodeRange{ 0x23f3, 0x23f3, 0 },
        UnicodeRange{ 0x2460, 0x24e9, 1 },
        UnicodeRange{ 0x24eb, 0x24ff, 1 },
        UnicodeRange{ 0x25a0, 0x25a1, 1 },
        UnicodeRange{ 0x25a3, 0x25a9, 1 },
        UnicodeRange{ 0x25b2, 0x25b3, 1 },
        UnicodeRange{ 0x25b6, 0x25b7, 1 },
        UnicodeRange{ 0x25bc, 0x25bd, 1 },
        UnicodeRange{ 0x25c0, 0x25c1, 1 },
        UnicodeRange{ 0x25c6, 0x25c8, 1 },
        UnicodeRange{ 0x25cb, 0x25cb, 1 },
        UnicodeRange{ 0x25ce, 0x25d1, 1 },
        UnicodeRange{ 0x25e2, 0x25e5, 1 },
        UnicodeRange{ 0x25ef, 0x25ef, 1 },
        UnicodeRange{ 0x25fd, 0x25fe, 0 },
        UnicodeRange{ 0x2605, 0x2606, 1 },
        UnicodeRange{ 0x2609, 0x2609, 1 },
        UnicodeRange{ 0x260e, 0x260f, 1 },
        UnicodeRange{ 0x2614, 0x2615, 0 },
        UnicodeRange{ 0x261c, 0x261c, 1 },
        UnicodeRange{ 0x261e, 0x261e, 1 },
        UnicodeRange{ 0x2640, 0x2640, 1 },
        UnicodeRange{ 0x2642, 0x2642, 1 },
        UnicodeRange{ 0x2648, 0x2653, 0 },
        UnicodeRange{ 0x2660, 0x2661, 1 },
        UnicodeRange{ 0x2663, 0x2665, 1 },
        UnicodeRange{ 0x2667, 0x266a, 1 },
        UnicodeRange{ 0x266c, 0x266d, 1 },
        UnicodeRange{ 0x266f, 0x266f, 1 },
        UnicodeRange{ 0x267f, 0x267f, 0 },
        UnicodeRange{ 0x2693, 0x2693, 0 },
        UnicodeRange{ 0x269e, 0x269f, 1 },
        UnicodeRange{ 0x26a1, 0x26a1, 0 },
        UnicodeRange{ 0x26aa, 0x26ab, 0 },
        UnicodeRange{ 0x26bd, 0x26be, 0 },
        UnicodeRange{ 0x26bf, 0x26bf, 1 },
        UnicodeRange{ 0x26c4, 0x26c5, 0 },
        UnicodeRange{ 0x26c6, 0x26cd, 1 },
        UnicodeRange{ 0x26ce, 0x26ce, 0 },
        UnicodeRange{ 0x26cf, 0x26d3, 1 },
        UnicodeRange{ 0x26d4, 0x26d4, 0 },
        UnicodeRange{ 0x26d5, 0x26e1, 1 },
        UnicodeRange{ 0x26e3, 0x26e3, 1 },
        UnicodeRange{ 0x26e8, 0x26e9, 1 },
        UnicodeRange{ 0x26ea, 0x26ea, 0 },
        UnicodeRange{ 0x26eb, 0x26f1, 1 },
        UnicodeRange{ 0x26f2, 0x26f3, 0 },
        UnicodeRange{ 0x26f4, 0x26f4, 1 },
        UnicodeRange{ 0x26f5, 0x26f5, 0 },
        UnicodeRange{ 0x26f6, 0x26f9, 1 },
        UnicodeRange{ 0x26fa, 0x26fa, 0 },
        UnicodeRange{ 0x26fb, 0x26fc, 1 },
        UnicodeRange{ 0x26fd, 0x26fd, 0 },
        UnicodeRange{ 0x26fe, 0x26ff, 1 },
        UnicodeRange{ 0x2705, 0x2705, 0 },
        UnicodeRange{ 0x270a, 0x270b, 0 },
        UnicodeRange{ 0x2728, 0x2728, 0 },
        UnicodeRange{ 0x273d, 0x273d, 1 },
        UnicodeRange{ 0x274c, 0x274c, 0 },
        UnicodeRange{ 0x274e, 0x274e, 0 },
        UnicodeRange{ 0x2753, 0x2755, 0 },
        UnicodeRange{ 0x2757, 0x2757, 0 },
        UnicodeRange{ 0x2776, 0x277f, 1 },
        UnicodeRange{ 0x2795, 0x2797, 0 },
        UnicodeRange{ 0x27b0, 0x27b0, 0 },
        UnicodeRange{ 0x27bf, 0x27bf, 0 },
        UnicodeRange{ 0x2b1b, 0x2b1c, 0 },
        UnicodeRange{ 0x2b50, 0x2b50, 0 },
        UnicodeRange{ 0x2b55, 0x2b55, 0 },
        UnicodeRange{ 0x2b56, 0x2b59, 1 },
        UnicodeRange{ 0x2e80, 0x2e99, 0 },
        UnicodeRange{ 0x2e9b, 0x2ef3, 0 },
        UnicodeRange{ 0x2f00, 0x2fd5, 0 },
        UnicodeRange{ 0x2ff0, 0x303e, 0 },
        UnicodeRange{ 0x3041, 0x3096, 0 },
        UnicodeRange{ 0x3099, 0x30ff, 0 },
        UnicodeRange{ 0x3105, 0x312f, 0 },
        UnicodeRange{ 0x3131, 0x318e, 0 },
        UnicodeRange{ 0x3190, 0x31e3, 0 },
        UnicodeRange{ 0x31ef, 0x321e, 0 },
        UnicodeRange{ 0x3220, 0x3247, 0 },
        UnicodeRange{ 0x3248, 0x324f, 1 },
        UnicodeRange{ 0x3250, 0x4dbf, 0 },
        UnicodeRange{ 0x4e00, 0xa48c, 0 },
        UnicodeRange{ 0xa490, 0xa4c6, 0 },
        UnicodeRange{ 0xa960, 0xa97c, 0 },
        UnicodeRange{ 0xac00, 0xd7a3, 0 },
        UnicodeRange{ 0xe000, 0xf8ff, 1 },
        UnicodeRange{ 0xf900, 0xfaff, 0 },
        UnicodeRange{ 0xfe00, 0xfe0f, 1 },
        UnicodeRange{ 0xfe10, 0xfe19, 0 },
        UnicodeRange{ 0xfe30, 0xfe52, 0 },
        UnicodeRange{ 0xfe54, 0xfe66, 0 },
        UnicodeRange{ 0xfe68, 0xfe6b, 0 },
        UnicodeRange{ 0xff01, 0xff60, 0 },
        UnicodeRange{ 0xffe0, 0xffe6, 0 },
        UnicodeRange{ 0xfffd, 0xfffd, 1 },
        UnicodeRange{ 0x16fe0, 0x16fe4, 0 },
        UnicodeRange{ 0x16ff0, 0x16ff1, 0 },
        UnicodeRange{ 0x17000, 0x187f7, 0 },
        UnicodeRange{ 0x18800, 0x18cd5, 0 },
        UnicodeRange{ 0x18d00, 0x18d08, 0 },
        UnicodeRange{ 0x1aff0, 0x1aff3, 0 },
        UnicodeRange{ 0x1aff5, 0x1affb, 0 },
        UnicodeRange{ 0x1affd, 0x1affe, 0 },
        UnicodeRange{ 0x1b000, 0x1b122, 0 },
        UnicodeRange{ 0x1b132, 0x1b132, 0 },
        UnicodeRange{ 0x1b150, 0x1b152, 0 },
        UnicodeRange{ 0x1b155, 0x1b155, 0 },
        UnicodeRange{ 0x1b164, 0x1b167, 0 },
        UnicodeRange{ 0x1b170, 0x1b2fb, 0 },
        UnicodeRange{ 0x1f004, 0x1f004, 0 },
        UnicodeRange{ 0x1f0cf, 0x1f0cf, 0 },
        UnicodeRange{ 0x1f100, 0x1f10a, 1 },
        UnicodeRange{ 0x1f110, 0x1f12d, 1 },
        UnicodeRange{ 0x1f130, 0x1f169, 1 },
        UnicodeRange{ 0x1f170, 0x1f18d, 1 },
        UnicodeRange{ 0x1f18e, 0x1f18e, 0 },
        UnicodeRange{ 0x1f18f, 0x1f190, 1 },
        UnicodeRange{ 0x1f191, 0x1f19a, 0 },
        UnicodeRange{ 0x1f19b, 0x1f1ac, 1 },
        UnicodeRange{ 0x1f1e6, 0x1f202, 0 },
        UnicodeRange{ 0x1f210, 0x1f23b, 0 },
        UnicodeRange{ 0x1f240, 0x1f248, 0 },
        UnicodeRange{ 0x1f250, 0x1f251, 0 },
        UnicodeRange{ 0x1f260, 0x1f265, 0 },
        UnicodeRange{ 0x1f300, 0x1f320, 0 },
        UnicodeRange{ 0x1f32d, 0x1f335, 0 },
        UnicodeRange{ 0x1f337, 0x1f37c, 0 },
        UnicodeRange{ 0x1f37e, 0x1f393, 0 },
        UnicodeRange{ 0x1f3a0, 0x1f3ca, 0 },
        UnicodeRange{ 0x1f3cf, 0x1f3d3, 0 },
        UnicodeRange{ 0x1f3e0, 0x1f3f0, 0 },
        UnicodeRange{ 0x1f3f4, 0x1f3f4, 0 },
        UnicodeRange{ 0x1f3f8, 0x1f43e, 0 },
        UnicodeRange{ 0x1f440, 0x1f440, 0 },
        UnicodeRange{ 0x1f442, 0x1f4fc, 0 },
        UnicodeRange{ 0x1f4ff, 0x1f53d, 0 },
        UnicodeRange{ 0x1f54b, 0x1f54e, 0 },
        UnicodeRange{ 0x1f550, 0x1f567, 0 },
        UnicodeRange{ 0x1f57a, 0x1f57a, 0 },
        UnicodeRange{ 0x1f595, 0x1f596, 0 },
        UnicodeRange{ 0x1f5a4, 0x1f5a4, 0 },
        UnicodeRange{ 0x1f5fb, 0x1f64f, 0 },
        UnicodeRange{ 0x1f680, 0x1f6c5, 0 },
        UnicodeRange{ 0x1f6cc, 0x1f6cc, 0 },
        UnicodeRange{ 0x1f6d0, 0x1f6d2, 0 },
        UnicodeRange{ 0x1f6d5, 0x1f6d7, 0 },
        UnicodeRange{ 0x1f6dc, 0x1f6df, 0 },
        UnicodeRange{ 0x1f6eb, 0x1f6ec, 0 },
        UnicodeRange{ 0x1f6f4, 0x1f6fc, 0 },
        UnicodeRange{ 0x1f7e0, 0x1f7eb, 0 },
        UnicodeRange{ 0x1f7f0, 0x1f7f0, 0 },
        UnicodeRange{ 0x1f90c, 0x1f93a, 0 },
        UnicodeRange{ 0x1f93c, 0x1f945, 0 },
        UnicodeRange{ 0x1f947, 0x1f9ff, 0 },
        UnicodeRange{ 0x1fa70, 0x1fa7c, 0 },
        UnicodeRange{ 0x1fa80, 0x1fa88, 0 },
        UnicodeRange{ 0x1fa90, 0x1fabd, 0 },
        UnicodeRange{ 0x1fabf, 0x1fac5, 0 },
        UnicodeRange{ 0x1face, 0x1fadb, 0 },
        UnicodeRange{ 0x1fae0, 0x1fae8, 0 },
        UnicodeRange{ 0x1faf0, 0x1faf8, 0 },
        UnicodeRange{ 0x20000, 0x2fffd, 0 },
        UnicodeRange{ 0x30000, 0x3fffd, 0 },
        UnicodeRange{ 0xe0100, 0xe01ef, 1 },
        UnicodeRange{ 0xf0000, 0xffffd, 1 },
        UnicodeRange{ 0x100000, 0x10fffd, 1 },
    };
}

// s_stage1/2/3/4 represents a multi-stage table, aka trie.
// The highest bits of the codepoint are an index into s_stage1, which selects a row in s_stage2.
// The next couple bits of the codepoint then select the column in that row.
// This continues until the last stage which contains the final value.
//
// Fundamentally, the trie is generated by taking all 1114112 codepoints and their assigned values and deduplicating
// chunks of e.g. 16 values each. Each deduplicated chunk is assigned its offset in the list of all deduplicated chunks.
// This results in two lists: 1114112/16=7132 IDs and however many deduplicated chunks you have accumulated.
// This is often called a two-stage table.
//
// If you want to look up the value now, you'll first find the deduplicated chunk offset via `offsets[codepoint / 16]`.
// This gives you the location of your chunk. Now you just look up the value with `values[offset + (codepoint & 15)]`.
//
// Since the 7132 offsets take up a lot more space than the deduplicated values (at least in case of the Unicode database),
// this process can be repeated by compressing the offset array the exact same way the values got compressed and so on.

// s_joinRules represents the UAX #29 extended grapheme cluster rules, however slightly modified to fit our needs.
// Specifically, UAX #29 states:
// > Note: Testing two adjacent characters is insufficient for determining a boundary.
//
// I completely agree, but I really hate it. So this code trades off correctness for simplicity
// by using a simple lookup table anyway. Under most circumstances users won't notice,
// because as far as I can see this only behaves different for degenerate ("invalid") Unicode.
// It reduces our code complexity significantly and is way *way* faster.
//
// This is a great reference for the s_joinRules table:
//   https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html

// Generated by CodepointWidthDetector_gen.go
// on 2024-04-02T02:27:18Z, from Unicode 15.1.0, 8491 bytes
// clang-format off
static constexpr uint16_t s_stage1[] = {
    0x0000, 0x0020, 0x0040, 0x0060, 0x0080, 0x009f, 0x00bf, 0x00ca, 0x00ca, 0x00d3, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00eb, 0x010b, 0x011d, 0x0121, 0x011e, 0x011b, 0x0126, 0x0146, 0x0166, 0x0166, 0x0166, 0x0182,
    0x01a2, 0x01ba, 0x01da, 0x01fa, 0x0146, 0x0146, 0x0218, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x022d, 0x00ca, 0x00ca,
    0x024d, 0x026d, 0x0146, 0x0146, 0x0146, 0x0282, 0x02a2, 0x02b0, 0x0146, 0x02c3, 0x02e1, 0x02f9, 0x0319, 0x0336, 0x0356, 0x0376,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x0396,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca,
    0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x00ca, 0x0396,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x03b6, 0x03be, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146, 0x0146,
    0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166,
    0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x03de,
    0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166,
    0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x0166, 0x03de,
};
static constexpr uint16_t s_stage2[] = {
    0x0000, 0x0004, 0x000c, 0x0014, 0x001c, 0x0024, 0x002a, 0x0031, 0x002a, 0x0037, 0x002a, 0x003f, 0x0047, 0x0049, 0x004f, 0x0057, 0x005f, 0x0065, 0x006d, 0x002a, 0x002a, 0x002a, 0x0073, 0x007b, 0x0083, 0x008a, 0x002a, 0x0091, 0x0098, 0x009f, 0x00a3, 0x00aa,
    0x00b2, 0x00b8, 0x00be, 0x00c5, 0x00cd, 0x00d5, 0x00dd, 0x00e5, 0x00ed, 0x00f5, 0x00fd, 0x0105, 0x00fd, 0x010d, 0x0115, 0x011d, 0x0125, 0x012d, 0x00ed, 0x0135, 0x013d, 0x0145, 0x014d, 0x0154, 0x015b, 0x0163, 0x0165, 0x016d, 0x0172, 0x006f, 0x017a, 0x0182,
    0x0185, 0x018d, 0x0195, 0x002a, 0x019d, 0x01a1, 0x01a5, 0x01aa, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x01b2, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x01b8, 0x01bf, 0x01c6, 0x01cd,
    0x01d4, 0x002a, 0x01dc, 0x002a, 0x01e2, 0x002a, 0x002a, 0x002a, 0x01ea, 0x01f0, 0x01f8, 0x01ff, 0x0207, 0x020f, 0x0217, 0x021d, 0x0224, 0x002a, 0x002a, 0x022b, 0x002a, 0x002a, 0x002a, 0x0047, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x0233, 0x023b, 0x0243, 0x0249, 0x0251, 0x0259, 0x0261, 0x0269, 0x0271, 0x0279, 0x0281, 0x002a, 0x0289, 0x002a, 0x0290, 0x0297, 0x002a, 0x029f, 0x02a3, 0x02ab, 0x002a, 0x002a, 0x02b3, 0x02bb, 0x02c3, 0x02cb, 0x02d3, 0x02db, 0x02e3, 0x02eb, 0x02f3, 0x002a,
    0x002a, 0x002a, 0x002a, 0x02fb, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0303, 0x0309, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x030d, 0x002a, 0x0314, 0x002a, 0x0043, 0x002a, 0x002a, 0x031c, 0x0320, 0x0328, 0x0328, 0x0328, 0x032e, 0x0334,
    0x033c, 0x0342, 0x0328, 0x034a, 0x0328, 0x0351, 0x0355, 0x035b, 0x0362, 0x0368, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328,
    0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x002a, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x036f, 0x0377, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x037a, 0x0382, 0x016f, 0x002a, 0x002a, 0x002a, 0x002a, 0x038a, 0x002a, 0x0392, 0x039a, 0x03a2, 0x03aa, 0x03b2, 0x03ba, 0x03bf, 0x03c7, 0x03cf, 0x03d7, 0x002a, 0x002a, 0x002a, 0x03de, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea,
    0x03eb, 0x03ec, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03ec, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03ec, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03ec, 0x03e6, 0x03e7, 0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03ec, 0x03e6, 0x03e7,
    0x03e8, 0x03e9, 0x03ea, 0x03eb, 0x03f3, 0x03fb, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3,
    0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0403, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x040b, 0x0411, 0x002a, 0x0417, 0x033c, 0x041f,
    0x0424, 0x0428, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0430, 0x002a, 0x002a, 0x002a, 0x0438, 0x002a, 0x043d, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x0445, 0x002a, 0x002a, 0x01d8, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x044d, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0452, 0x0458, 0x002a, 0x00a7, 0x0460, 0x002a, 0x0468, 0x0470, 0x0478, 0x0480, 0x0488, 0x0490,
    0x0498, 0x04a0, 0x04a3, 0x04ab, 0x002a, 0x04b0, 0x04b8, 0x04c0, 0x002a, 0x002a, 0x04c7, 0x04cf, 0x01f8, 0x04d7, 0x002a, 0x002a, 0x04da, 0x04e2, 0x01f8, 0x04ea, 0x04ed, 0x002a, 0x04f4, 0x002a, 0x002a, 0x002a, 0x04fa, 0x002a, 0x002a, 0x002a, 0x0502, 0x050a,
    0x002a, 0x0510, 0x0518, 0x0520, 0x0528, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x052c, 0x002a, 0x0534, 0x002a, 0x053b, 0x0543, 0x054a, 0x002a, 0x002a, 0x002a, 0x002a, 0x054d, 0x0555, 0x055d, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x055f, 0x0567, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0201, 0x056a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0571, 0x0578, 0x057c, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328,
    0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0584, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328,
    0x058c, 0x0594, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x0596, 0x0328, 0x0328, 0x0328, 0x0328, 0x059e, 0x05a5, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x05ab, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x05b3, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x05bb,
    0x05c3, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x05c7, 0x05cf, 0x002a, 0x002a, 0x05d7, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x05df, 0x05e7, 0x05ef, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x05f7, 0x002a, 0x05fe, 0x002a, 0x056a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x0601, 0x0607, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x0607, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x060d, 0x002a, 0x0615, 0x002a, 0x002a, 0x002a, 0x002a,
    0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x002a, 0x061d, 0x061e, 0x061e, 0x0625, 0x062d, 0x0633, 0x063b, 0x0641, 0x0649, 0x0651,
    0x061e, 0x061e, 0x0659, 0x0660, 0x0668, 0x066f, 0x0677, 0x067f, 0x0680, 0x0681, 0x0689, 0x0691, 0x0699, 0x069e, 0x0680, 0x06a6, 0x0680, 0x06ae, 0x002a, 0x06b6, 0x002a, 0x06be, 0x06c6, 0x06cd, 0x06d4, 0x061e, 0x06dc, 0x06e4, 0x0680, 0x0680, 0x061e, 0x06ec,
    0x06f4, 0x06fc, 0x002a, 0x002a, 0x002a, 0x002a, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x061e, 0x0704, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328,
    0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0328, 0x0329, 0x070c, 0x0047, 0x0714, 0x0714, 0x0047, 0x0047, 0x0047, 0x071c, 0x0714, 0x0714,
    0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x0714, 0x02a3, 0x02a3,
    0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x02a3, 0x0724,
};
static constexpr uint16_t s_stage3[] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0009, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0011, 0x0018, 0x0020, 0x0022, 0x002a, 0x0008, 0x0029, 0x0030,
    0x0036, 0x003e, 0x0040, 0x0047, 0x004c, 0x0008, 0x004a, 0x002d,
    0x004e, 0x002d, 0x0053, 0x0029, 0x005b, 0x0063, 0x0034, 0x0008,
    0x004e, 0x002d, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x002a, 0x006b, 0x0049, 0x0008, 0x0008, 0x0008,
    0x0008, 0x004c, 0x0008, 0x004c, 0x0008, 0x0008, 0x0008, 0x0072,
    0x005a, 0x0079, 0x0081, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089,
    0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0008,
    0x0008, 0x0091, 0x0092, 0x0098, 0x0028, 0x0091, 0x0092, 0x0098,
    0x0028, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x004c,
    0x0008, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092, 0x004c,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x00a6, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ad, 0x0089, 0x0089,
    0x0089, 0x0089, 0x00af, 0x00b5, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00bd, 0x0008, 0x0089, 0x00c5, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00a0, 0x0089, 0x0089, 0x0008, 0x0008,
    0x00cd, 0x0008, 0x0008, 0x00a8, 0x00d5, 0x00dc, 0x00e3, 0x0008,
    0x0008, 0x00e9, 0x00cc, 0x0008, 0x0008, 0x0008, 0x0089, 0x0089,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a8,
    0x0089, 0x00cd, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a0,
    0x00a4, 0x00f1, 0x0008, 0x0008, 0x00a8, 0x00f9, 0x00fd, 0x00a2,
    0x0008, 0x0008, 0x0008, 0x0101, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0109, 0x0089, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ac, 0x0089,
    0x0089, 0x0111, 0x0089, 0x0089, 0x0089, 0x00a4, 0x0008, 0x0119,
    0x011e, 0x011e, 0x011e, 0x011e, 0x0124, 0x0089, 0x012a, 0x00ad,
    0x011e, 0x0132, 0x0008, 0x0008, 0x011e, 0x0101, 0x0008, 0x0119,
    0x011e, 0x011e, 0x013a, 0x0141, 0x0147, 0x00dc, 0x014e, 0x00ce,
    0x0154, 0x0132, 0x0008, 0x015b, 0x015d, 0x0101, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x015f, 0x0165, 0x016c, 0x00cc,
    0x0008, 0x0008, 0x0008, 0x0170, 0x0008, 0x0101, 0x0008, 0x0119,
    0x011e, 0x011e, 0x013a, 0x0178, 0x0147, 0x00af, 0x0180, 0x0008,
    0x0008, 0x0132, 0x0008, 0x0008, 0x0187, 0x00dc, 0x014e, 0x00a9,
    0x0154, 0x0132, 0x0008, 0x018f, 0x0008, 0x00cb, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00a8, 0x0197, 0x00e3, 0x00ce,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a3, 0x0008, 0x0119,
    0x011e, 0x011e, 0x013a, 0x011e, 0x0147, 0x00b0, 0x019e, 0x01a4,
    0x01ac, 0x0132, 0x0008, 0x0008, 0x0008, 0x00b0, 0x00e3, 0x01a4,
    0x0008, 0x0132, 0x0008, 0x00ca, 0x0008, 0x00a4, 0x0008, 0x0119,
    0x011e, 0x011e, 0x011e, 0x011e, 0x017d, 0x00b0, 0x01b4, 0x00ce,
    0x0008, 0x0132, 0x0008, 0x0008, 0x0008, 0x0101, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x01bb, 0x01c2, 0x0089,
    0x0008, 0x0008, 0x0132, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x01c7, 0x00a5, 0x00ce, 0x008a, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x01c7, 0x00a3, 0x0008, 0x008a, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a6, 0x0008, 0x0008,
    0x015e, 0x01bc, 0x00b0, 0x00a9, 0x0089, 0x00ad, 0x0089, 0x0089,
    0x0089, 0x00a3, 0x015d, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x01cf, 0x0089, 0x01d3, 0x0008, 0x0008, 0x00a8,
    0x01d8, 0x01df, 0x01e6, 0x00e4, 0x0008, 0x01ec, 0x01f3, 0x0008,
    0x01fb, 0x0008, 0x0008, 0x0008, 0x0008, 0x0203, 0x0203, 0x0203,
    0x0203, 0x0203, 0x0203, 0x0203, 0x0203, 0x020b, 0x020b, 0x020b,
    0x020b, 0x020b, 0x0213, 0x0213, 0x0213, 0x0213, 0x0213, 0x0213,
    0x0213, 0x0213, 0x0008, 0x0008, 0x0008, 0x00a9, 0x0008, 0x0008,
    0x0008, 0x0008, 0x021b, 0x0008, 0x0008, 0x0008, 0x016d, 0x0008,
    0x0008, 0x0132, 0x0008, 0x0008, 0x0008, 0x0132, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00aa, 0x0089, 0x0089, 0x00a4,
    0x00f1, 0x0008, 0x0008, 0x0008, 0x0008, 0x0221, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x01a4, 0x0008, 0x0008, 0x0008,
    0x0008, 0x00cc, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089, 0x00a4,
    0x0089, 0x00a4, 0x0008, 0x0008, 0x00ce, 0x00a4, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00a9, 0x008a, 0x0228, 0x0089, 0x0089, 0x00dc,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089, 0x0089,
    0x008a, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a3,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00aa, 0x0089, 0x00a3,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x00a4, 0x0008, 0x00a5,
    0x0008, 0x0008, 0x0008, 0x00ad, 0x01d4, 0x0008, 0x0008, 0x0008,
    0x0008, 0x00a8, 0x0089, 0x00a4, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00aa, 0x0089, 0x0089, 0x0008, 0x0008, 0x0126, 0x0089, 0x0089,
    0x0167, 0x00f2, 0x00a6, 0x0008, 0x0230, 0x0238, 0x023d, 0x0022,
    0x0245, 0x024d, 0x0253, 0x0008, 0x025a, 0x0008, 0x0008, 0x0262,
    0x0268, 0x002c, 0x007a, 0x0025, 0x0008, 0x0008, 0x0008, 0x0008,
    0x002c, 0x0008, 0x0008, 0x0089, 0x0089, 0x0089, 0x0089, 0x00cd,
    0x0008, 0x0270, 0x004c, 0x0073, 0x0008, 0x0277, 0x002d, 0x0008,
    0x025a, 0x0008, 0x0008, 0x0033, 0x0060, 0x0092, 0x0026, 0x0092,
    0x0028, 0x0008, 0x004c, 0x027f, 0x0285, 0x0008, 0x028c, 0x0008,
    0x0028, 0x0008, 0x0008, 0x0292, 0x0008, 0x007a, 0x0008, 0x0008,
    0x0008, 0x0040, 0x029a, 0x0295, 0x029f, 0x0068, 0x02a4, 0x007d,
    0x0032, 0x0008, 0x02aa, 0x002e, 0x0008, 0x02b2, 0x02b0, 0x0008,
    0x0008, 0x02b0, 0x0008, 0x002b, 0x004c, 0x002b, 0x0008, 0x0008,
    0x007a, 0x0008, 0x0008, 0x002e, 0x02ba, 0x0008, 0x02c2, 0x0008,
    0x0008, 0x02ca, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x02cb, 0x0008, 0x0008, 0x0008, 0x02d3, 0x02db, 0x02e3, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092,
    0x0092, 0x0092, 0x0092, 0x02eb, 0x0092, 0x0092, 0x0092, 0x0092,
    0x0098, 0x0092, 0x0092, 0x0008, 0x0008, 0x0008, 0x0008, 0x0098,
    0x02f1, 0x02f7, 0x0032, 0x02fd, 0x0304, 0x0028, 0x0008, 0x0239,
    0x007a, 0x0008, 0x030c, 0x0314, 0x031b, 0x0323, 0x0329, 0x0330,
    0x0330, 0x0330, 0x0330, 0x032d, 0x0338, 0x033c, 0x0330, 0x0344,
    0x0347, 0x0330, 0x0331, 0x034f, 0x0008, 0x0357, 0x035b, 0x0359,
    0x0363, 0x0330, 0x0367, 0x0368, 0x036e, 0x0370, 0x0375, 0x034b,
    0x0372, 0x037b, 0x0381, 0x0389, 0x0363, 0x0391, 0x02c5, 0x025a,
    0x0399, 0x028a, 0x002b, 0x039d, 0x03a5, 0x03ac, 0x0008, 0x03b4,
    0x0008, 0x004e, 0x0092, 0x0008, 0x0008, 0x03bc, 0x0008, 0x025a,
    0x0008, 0x0399, 0x03c4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0289, 0x0008, 0x03cc, 0x0008, 0x0008, 0x03d4, 0x0008,
    0x0008, 0x0008, 0x0008, 0x03d8, 0x0028, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00ce, 0x00a6, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00ce, 0x03e0, 0x03e0, 0x03e0, 0x03e6,
    0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03ea, 0x0008,
    0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03f2, 0x0008, 0x0008, 0x0008, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03fa, 0x0402, 0x0405, 0x040c, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e1, 0x0414, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x041c, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x040c, 0x03e0, 0x03e1, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03ea, 0x0424, 0x03e0, 0x03e0, 0x03e0, 0x03e1, 0x03e0,
    0x03e0, 0x03e0, 0x03e0, 0x0092, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x0403, 0x042b, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e9, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e1,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ce,
    0x0126, 0x01d4, 0x0008, 0x0008, 0x0008, 0x00a8, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0433, 0x00ca, 0x0008, 0x0008, 0x00a0, 0x043a,
    0x0008, 0x0008, 0x00a6, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00aa, 0x0089, 0x01d4, 0x0008, 0x0008, 0x0008, 0x0089, 0x0089,
    0x00a6, 0x00ce, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a8, 0x01d4,
    0x0008, 0x0008, 0x00ce, 0x0089, 0x00a4, 0x0008, 0x0203, 0x0203,
    0x0203, 0x0442, 0x00a4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00a0, 0x0089, 0x00cd, 0x0008, 0x0008, 0x0008, 0x00f1, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00ad, 0x008a, 0x0008, 0x00ca,
    0x0447, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x044d, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0455, 0x045c, 0x00cc,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x01a4, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00a0, 0x0462, 0x0008, 0x0008, 0x046a, 0x046b,
    0x046b, 0x046f, 0x046b, 0x046b, 0x046b, 0x046a, 0x046b, 0x046b,
    0x046f, 0x046b, 0x046b, 0x046b, 0x046a, 0x046b, 0x046b, 0x0474,
    0x0008, 0x020b, 0x020b, 0x047c, 0x0483, 0x0213, 0x0213, 0x0213,
    0x0213, 0x0213, 0x0487, 0x0008, 0x0008, 0x0008, 0x015d, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0089, 0x048f, 0x03e0, 0x0422, 0x0089,
    0x0089, 0x03e0, 0x03e0, 0x03e5, 0x03e0, 0x03e1, 0x03ea, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0497, 0x03e0,
    0x03e0, 0x03e0, 0x03e0, 0x0423, 0x0008, 0x0008, 0x0008, 0x049f,
    0x0008, 0x0008, 0x0008, 0x0008, 0x03e1, 0x0008, 0x0000, 0x04a7,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00f1,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00cd, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00a8, 0x00a5, 0x0461, 0x00aa, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0165, 0x0008, 0x0008, 0x0008,
    0x0008, 0x00aa, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0448,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a9,
    0x021b, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089,
    0x008a, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0131, 0x00ce,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089, 0x04af,
    0x00cb, 0x00eb, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x00ce, 0x0089, 0x00a3, 0x0008,
    0x01a4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ca, 0x0008,
    0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x0089,
    0x04b7, 0x04be, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00aa, 0x0089, 0x015d, 0x00cc, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00ce, 0x0089, 0x00a5, 0x0008, 0x0008,
    0x00a4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x019a,
    0x00dc, 0x016c, 0x00ce, 0x0008, 0x04c6, 0x00a3, 0x00a3, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a9, 0x0089, 0x008a,
    0x0008, 0x0008, 0x015d, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a4,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00ce,
    0x01d4, 0x0089, 0x00cd, 0x0008, 0x0008, 0x0447, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00cd, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00a0, 0x0089, 0x0008, 0x0008, 0x0008, 0x00a9,
    0x01d2, 0x00a4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00aa,
    0x0089, 0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x00af, 0x04c9, 0x04cf, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x00ad, 0x00ac, 0x0435, 0x0008, 0x0008, 0x0008,
    0x00ad, 0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x00a0, 0x04d7,
    0x00ce, 0x0008, 0x00ad, 0x00a4, 0x0008, 0x0008, 0x0008, 0x0008,
    0x04de, 0x04e4, 0x0089, 0x00a6, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x00ce, 0x008a, 0x0089, 0x0008, 0x0008, 0x00ac, 0x0089,
    0x0089, 0x00ad, 0x008a, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x04ec, 0x04f3, 0x04fa, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00a1, 0x00f9, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x04bc, 0x0008, 0x04fe, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00aa, 0x0197, 0x00a5, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0268, 0x0268, 0x00a7,
    0x0089, 0x01d4, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x008a, 0x0008, 0x00ce, 0x00ad, 0x0089, 0x0089, 0x0089, 0x0089,
    0x0089, 0x00ce, 0x00a5, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0506, 0x0008, 0x00a6, 0x0008, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x03e0, 0x0008, 0x03e0, 0x03e0, 0x03f2, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x03e0, 0x0423, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x03e4, 0x050e, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x0419, 0x0008, 0x0515, 0x0008, 0x0008, 0x051d,
    0x0008, 0x03ee, 0x0008, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 0x03e0,
    0x03e0, 0x03e0, 0x03ea, 0x0008, 0x0008, 0x0008, 0x01a4, 0x0525,
    0x0008, 0x0008, 0x0008, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089,
    0x01d4, 0x0089, 0x0089, 0x008a, 0x0008, 0x0008, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x00a9, 0x021f, 0x052d, 0x0532, 0x0537,
    0x00a4, 0x0008, 0x0008, 0x0008, 0x021b, 0x0008, 0x0008, 0x016d,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0089,
    0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x008a, 0x00a0, 0x0089,
    0x0089, 0x0089, 0x0089, 0x0089, 0x00a3, 0x00f1, 0x0008, 0x043a,
    0x0008, 0x0008, 0x00a0, 0x00ad, 0x0089, 0x0008, 0x0008, 0x008a,
    0x0089, 0x0089, 0x0539, 0x00b3, 0x00a5, 0x0008, 0x0008, 0x00ce,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x015d, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x00aa, 0x0008, 0x0008, 0x008a,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x00aa, 0x00a5, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0541, 0x0330, 0x0330,
    0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0331, 0x0330,
    0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0092, 0x0549, 0x0092,
    0x0092, 0x0092, 0x0551, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092,
    0x0559, 0x0561, 0x0563, 0x0092, 0x056b, 0x0572, 0x0577, 0x0092,
    0x057a, 0x0330, 0x0330, 0x0330, 0x0330, 0x057f, 0x0585, 0x0585,
    0x0585, 0x058d, 0x0330, 0x03e0, 0x0595, 0x03e0, 0x0403, 0x059b,
    0x05a0, 0x03e0, 0x05a3, 0x05ab, 0x0330, 0x033a, 0x0330, 0x0330,
    0x0330, 0x0338, 0x0338, 0x0338, 0x0338, 0x05ac, 0x0333, 0x05b4,
    0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x05b5,
    0x0338, 0x0338, 0x033c, 0x0330, 0x0338, 0x0338, 0x0338, 0x0338,
    0x05bb, 0x033c, 0x0330, 0x0338, 0x0338, 0x05c2, 0x05ca, 0x0338,
    0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0339, 0x05d2,
    0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338,
    0x05d5, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338, 0x0338,
    0x05dc, 0x0287, 0x05e4, 0x0338, 0x0338, 0x0338, 0x0330, 0x0330,
    0x0358, 0x0330, 0x0330, 0x05a6, 0x0330, 0x0541, 0x0330, 0x0330,
    0x0330, 0x0330, 0x0330, 0x0330, 0x0330, 0x0335, 0x0338, 0x0338,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x033a, 0x0541,
    0x05d7, 0x0334, 0x0330, 0x05a8, 0x0334, 0x033b, 0x0008, 0x0008,
    0x0008, 0x0008, 0x0008, 0x0008, 0x05ec, 0x0330, 0x0008, 0x0008,
    0x03cc, 0x0330, 0x0338, 0x033c, 0x05ac, 0x0330, 0x0008, 0x05ec,
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0330, 0x0008,
    0x05ee, 0x0008, 0x0008, 0x0008, 0x0008, 0x0330, 0x0008, 0x0008,
    0x0008, 0x0287, 0x0330, 0x0330, 0x0008, 0x05f6, 0x0338, 0x0338,
    0x0338, 0x0338, 0x0338, 0x05fb, 0x05ff, 0x0338, 0x0338, 0x0338,
    0x0338, 0x0338, 0x0338, 0x0338, 0x0330, 0x0330, 0x0330, 0x0330,
    0x0330, 0x0330, 0x0338, 0x033b, 0x0338, 0x05ac, 0x0338, 0x0338,
    0x0338, 0x0338, 0x0338, 0x05b4, 0x033a, 0x0332, 0x0338, 0x033c,
    0x0338, 0x05ac, 0x0338, 0x05ac, 0x0330, 0x0330, 0x0330, 0x0330,
    0x0330, 0x0330, 0x0330, 0x034f, 0x0607, 0x0000, 0x0000, 0x0000,
    0x0089, 0x0089, 0x0089, 0x0089, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0089, 0x0089, 0x0089, 0x0089,
    0x0089, 0x0089, 0x0000, 0x0000, 0x0092, 0x0092, 0x0092, 0x0092,
    0x0092, 0x0092, 0x0092, 0x060f,
};
static constexpr uint8_t s_stage4[] = {
    0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x41, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x40,
    0xc0, 0x4c, 0xc0, 0x40, 0x40, 0x01, 0xcc, 0x40,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0xc0,
    0xc0, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0,
    0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0xc0,
    0xc0, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0xc0,
    0xc0, 0xc0, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0x40,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0x40, 0xc0,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40,
    0xc0, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0xc0,
    0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0xc0, 0x40,
    0x40, 0xc0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0, 0x40,
    0xc0, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xc0, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02,
    0x40, 0x02, 0x02, 0x40, 0x02, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x40, 0x01, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x04, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x04, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40,
    0x40, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x02, 0x02, 0x02, 0x40, 0x40, 0x40,
    0x40, 0x04, 0x04, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x02, 0x02, 0x04, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x40, 0x40, 0x4b, 0x4b,
    0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x4b, 0x02, 0x02,
    0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0a,
    0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x4b, 0x40, 0x4b, 0x4b, 0x4b, 0x4b,
    0x4b, 0x4b, 0x40, 0x4b, 0x40, 0x40, 0x40, 0x4b,
    0x4b, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x40,
    0x40, 0x02, 0x02, 0x0a, 0x40, 0x40, 0x40, 0x40,
    0x4b, 0x4b, 0x40, 0x4b, 0x4b, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x40, 0x40,
    0x4b, 0x40, 0x4b, 0x4b, 0x40, 0x4b, 0x4b, 0x4b,
    0x02, 0x02, 0x40, 0x02, 0x02, 0x0a, 0x40, 0x40,
    0x4b, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x4b, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x40,
    0x02, 0x02, 0x02, 0x0a, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x02, 0x02, 0x40, 0x4b, 0x4b, 0x4b, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x02, 0x40, 0x02, 0x02,
    0x02, 0x0a, 0x44, 0x40, 0x40, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x02, 0x40, 0x42, 0x02, 0x02, 0x02, 0x02, 0x40,
    0x40, 0x40, 0x00, 0x00, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02,
    0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x02, 0x00,
    0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x40, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00,
    0x02, 0x40, 0x40, 0x85, 0x85, 0x85, 0x85, 0x85,
    0x85, 0x85, 0x85, 0x46, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x47, 0x47, 0x47, 0x47, 0x47,
    0x47, 0x47, 0x47, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02, 0x01,
    0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x02,
    0x40, 0x40, 0x40, 0x01, 0x02, 0x0d, 0x01, 0x01,
    0xc0, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0x40,
    0x40, 0xc0, 0xc0, 0x40, 0x40, 0x41, 0x41, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x40, 0xc0, 0x40, 0xc0,
    0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0x4c,
    0x40, 0xc0, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x01, 0x01, 0x01, 0x01, 0x01, 0x41,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40, 0x40,
    0xc0, 0xcc, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0,
    0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0xcc, 0xcc, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x4c, 0x4c, 0x40,
    0x40, 0x40, 0x40, 0x40, 0xc0, 0x40, 0xc0, 0x40,
    0x40, 0x40, 0xc0, 0x40, 0x40, 0xc0, 0x40, 0x40,
    0x40, 0xc0, 0x40, 0x40, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0x40, 0xc0, 0x40, 0x40, 0x40, 0xc0, 0x40,
    0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0xc0, 0xc0,
    0xc0, 0xc0, 0x40, 0x40, 0x8c, 0x8c, 0x40, 0x40,
    0x40, 0x40, 0x4c, 0x80, 0x80, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x4c, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x4c, 0x40, 0x8c, 0x8c, 0x8c, 0x8c,
    0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x8c, 0x40,
    0x40, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x40,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0xcc, 0xc0, 0xc0,
    0xc0, 0xc0, 0xc0, 0x4c, 0x4c, 0x40, 0x40, 0x40,
    0x40, 0xc0, 0xc0, 0x40, 0x40, 0xcc, 0xc0, 0x40,
    0x40, 0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0xc0,
    0x40, 0x40, 0xc0, 0xc0, 0x40, 0x40, 0x40, 0x4c,
    0x4c, 0x8c, 0x8c, 0x40, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0xcc, 0xc0, 0x4c, 0xcc, 0x4c, 0x4c, 0x4c,
    0x4c, 0xcc, 0xcc, 0x4c, 0x4c, 0x4c, 0x40, 0x8c,
    0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0x4c, 0xcc,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x4c, 0x4c, 0x4c, 0x4c, 0xcc, 0xcc, 0x4c, 0xcc,
    0xcc, 0xcc, 0x4c, 0xcc, 0xcc, 0x4c, 0xcc, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x4c,
    0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0xcc, 0xcc, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0xcc, 0xcc,
    0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0xcc, 0xcc, 0xcc,
    0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x8c, 0x8c, 0xcc,
    0x8c, 0xcc, 0xcc, 0x8c, 0xcc, 0xcc, 0x8c, 0xcc,
    0xcc, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x40,
    0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x4c, 0x40, 0x4c,
    0x40, 0x8c, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x4c, 0x40, 0x40, 0x4c, 0x40, 0x40, 0x40,
    0x40, 0x8c, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x8c,
    0x8c, 0x8c, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x8c, 0x8c, 0x8c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x8c, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x4c, 0x4c, 0x4c, 0x40, 0x40, 0x40, 0x8c,
    0x8c, 0x40, 0x40, 0x40, 0x40, 0x8c, 0xc0, 0xc0,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40,
    0x40, 0x40, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x40, 0x40, 0x80, 0x80, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x8c, 0x80, 0x80, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x8c, 0x80, 0x40, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x40, 0x02, 0x02, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x80, 0x80, 0x80, 0x40, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x40, 0x80, 0x8c, 0x80, 0x80, 0x80,
    0x80, 0x80, 0x80, 0x40, 0x40, 0x02, 0x40, 0x40,
    0x40, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02, 0x40,
    0x40, 0x40, 0x85, 0x85, 0x85, 0x85, 0x85, 0x40,
    0x40, 0x40, 0x40, 0x02, 0x02, 0x40, 0x40, 0x40,
    0x00, 0x02, 0x00, 0x40, 0x40, 0x02, 0x40, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x02, 0x40, 0x40, 0x40,
    0x40, 0x40, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02,
    0x40, 0x40, 0x88, 0x89, 0x89, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x88, 0x89, 0x89, 0x89, 0x89,
    0x40, 0x40, 0x40, 0x40, 0x46, 0x46, 0x46, 0x46,
    0x46, 0x46, 0x46, 0x40, 0x40, 0x40, 0x47, 0x47,
    0x47, 0x47, 0x47, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x82, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x01, 0x40,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x42, 0x42, 0x41,
    0x01, 0x01, 0x01, 0x40, 0xc0, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x04, 0x40, 0x40, 0x02,
    0x40, 0x44, 0x44, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x40, 0x40,
    0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x44, 0x02, 0x02, 0x40, 0x40, 0x40, 0x40, 0x02,
    0x02, 0x44, 0x02, 0x02, 0x02, 0x02, 0x40, 0x40,
    0x40, 0x40, 0x44, 0x44, 0x44, 0x44, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x40, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x40, 0x40, 0x02, 0x40, 0x02,
    0x02, 0x40, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x44, 0x02, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80,
    0x80, 0x80, 0x02, 0x40, 0x40, 0x40, 0x80, 0x80,
    0x80, 0x80, 0x40, 0x80, 0x80, 0x40, 0x40, 0x80,
    0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x80, 0x80,
    0x40, 0x40, 0x80, 0x40, 0x40, 0x01, 0x01, 0x01,
    0x01, 0x40, 0x40, 0x40, 0x40, 0x02, 0x02, 0x02,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x40, 0x40, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c, 0x4c,
    0x4c, 0xc0, 0xc0, 0xc0, 0x40, 0x40, 0x4c, 0x4c,
    0x4c, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40,
    0x4c, 0xc0, 0xc0, 0x40, 0x40, 0x4c, 0x4c, 0x4c,
    0x4c, 0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
    0xc0, 0x8c, 0xc0, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x8c, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x43, 0x43, 0x43,
    0x43, 0x43, 0x43, 0x43, 0x43, 0x80, 0x8c, 0x8c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x80, 0x80, 0x8c,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x8c, 0x8c, 0x8c,
    0x8c, 0x8c, 0x8c, 0x80, 0x4c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x4c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x4c, 0x4c,
    0x4c, 0x4c, 0x8c, 0x4c, 0x4c, 0x4c, 0x8c, 0x4c,
    0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x82, 0x82, 0x82,
    0x82, 0x82, 0x8c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x8c, 0x4c, 0x4c, 0x8c, 0x8c, 0x8c, 0x8c,
    0x8c, 0x8c, 0x40, 0x40, 0x4c, 0x4c, 0x4c, 0x8c,
    0x8c, 0x8c, 0x8c, 0x4c, 0x40, 0x40, 0x40, 0x40,
    0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x4c, 0x40, 0x40,
    0x40, 0x40, 0x8c, 0x8c, 0x8c, 0x8c, 0x40, 0x8c,
    0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x40, 0x8c, 0x41,
    0x01, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0xc0,
    0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x40,
};
static constexpr uint32_t s_joinRules[2][16] = {
    {
        0b00000011110011111111111111001111,
        0b00001111111111111111111111111111,
        0b00000011110011111111111111001111,
        0b00000011110011111111111101001111,
        0b00000000000000000000000000001100,
        0b00000011110000001100001111001111,
        0b00000011110011110000111111001111,
        0b00000011110011110011111111001111,
        0b00000011110011110000111111001111,
        0b00000011110011110011111111001111,
        0b00000011000011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000000110011111111111111001111,
        0b00000000000000000000000000000000,
        0b00000000000000000000000000000000,
    },
    {
        0b00000011110011111111111111001111,
        0b00001111111111111111111111111111,
        0b00000011110011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000000000000000000000000001100,
        0b00000011110000001100001111001111,
        0b00000011110011110000111111001111,
        0b00000011110011110011111111001111,
        0b00000011110011110000111111001111,
        0b00000011110011110011111111001111,
        0b00000011000011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000011110011111111111111001111,
        0b00000000110011111111111111001111,
        0b00000000000000000000000000000000,
        0b00000000000000000000000000000000,
    },
};
constexpr uint8_t ucdLookup(const char32_t cp) noexcept
{
    const auto s1 = s_stage1[cp >> 11];
    const auto s2 = s_stage2[s1 + ((cp >> 6) & 31)];
    const auto s3 = s_stage3[s2 + ((cp >> 3) & 7)];
    const auto s4 = s_stage4[s3 + ((cp >> 0) & 7)];
    return s4;
}
constexpr uint8_t ucdGraphemeJoins(const uint8_t state, const uint8_t lead, const uint8_t trail) noexcept
{
    const auto l = lead & 15;
    const auto t = trail & 15;
    return (s_joinRules[state][l] >> (t * 2)) & 3;
}
constexpr bool ucdGraphemeDone(const uint8_t state) noexcept
{
    return state == 3;
}
constexpr int ucdToCharacterWidth(const uint8_t val) noexcept
{
    return val >> 6;
}
// clang-format on

[[msvc::forceinline]] constexpr std::wstring_view::iterator utf16NextOrFFFD(std::wstring_view::iterator it, const std::wstring_view::iterator& end, char32_t& out)
{
    char32_t c = *it++;

    // Is any surrogate?
    if ((c & 0xF800) == 0xD800)
    {
        const char32_t c1 = c;
        c = 0xfffd;

        // Is leading surrogate and not at end?
        if ((c1 & 0x400) == 0 && it != end)
        {
            const char32_t c2 = *it;
            // Is also trailing surrogate!
            if ((c2 & 0xFC00) == 0xDC00)
            {
                c = (c1 << 10) - 0x35FDC00 + c2;
                ++it;
            }
        }
    }

    out = c;
    return it;
}

[[msvc::forceinline]] constexpr std::wstring_view::iterator utf16PrevOrFFFD(std::wstring_view::iterator it, const std::wstring_view::iterator& beg, char32_t& out)
{
    char32_t c = *--it;

    // Is any surrogate?
    if ((c & 0xF800) == 0xD800)
    {
        const char32_t c2 = c;
        c = 0xfffd;

        // Is trailing surrogate and not at begin?
        if ((c2 & 0x400) != 0 && it != beg)
        {
            const char32_t c1 = it[-1];
            // Is also leading surrogate!
            if ((c1 & 0xFC00) == 0xD800)
            {
                c = (c1 << 10) - 0x35FDC00 + c2;
                --it;
            }
        }
    }

    out = c;
    return it;
}

static CodepointWidthDetector s_codepointWidthDetector;

CodepointWidthDetector& CodepointWidthDetector::Singleton() noexcept
{
    return s_codepointWidthDetector;
}

size_t CodepointWidthDetector::GraphemeNext(const std::wstring_view& str, size_t offset, int* width) noexcept
{
    if constexpr (!Feature_Graphemes::IsEnabled())
    {
        return _graphemeNextOld(str, offset, width);
    }

    int widthIgnored;
    if (!width)
    {
        width = &widthIgnored;
    }

    const auto beg = str.begin();
    const auto end = str.end();
    auto it = beg + std::min(offset, str.size());

    if (it == end)
    {
        *width = 1;
        return offset;
    }

    char32_t cp;
    it = utf16NextOrFFFD(it, end, cp);

    auto lead = ucdLookup(cp);
    int totalWidth = 0;
    uint8_t state = 0;

    for (;;)
    {
        auto w = ucdToCharacterWidth(lead);
        if (w == 3)
        {
            w = _checkFallbackViaCache(cp);
        }

        totalWidth += w;

        if (it == end)
        {
            break;
        }

        const auto it2 = utf16NextOrFFFD(it, end, cp);
        const auto trail = ucdLookup(cp);
        state = ucdGraphemeJoins(state, lead, trail);

        if (ucdGraphemeDone(state))
        {
            break;
        }

        it = it2;
        lead = trail;
    }

    *width = totalWidth < 1 ? 1 : (totalWidth > 2 ? 2 : totalWidth);
    return it - beg;
}

// This code is identical to GraphemeNext() but with the order of operations reversed since we're iterating backwards.
size_t CodepointWidthDetector::GraphemePrev(const std::wstring_view& str, size_t offset, int* width) noexcept
{
    if constexpr (!Feature_Graphemes::IsEnabled())
    {
        return _graphemePrevOld(str, offset, width);
    }

    int widthIgnored;
    if (!width)
    {
        width = &widthIgnored;
    }

    const auto beg = str.begin();
    auto it = beg + std::min(offset, str.size());

    if (it == beg)
    {
        *width = 1;
        return 0;
    }

    char32_t cp;
    it = utf16PrevOrFFFD(it, beg, cp);

    auto trail = ucdLookup(cp);
    int totalWidth = 0;
    uint8_t state = 0;

    for (;;)
    {
        auto w = ucdToCharacterWidth(trail);
        if (w == 3)
        {
            w = _checkFallbackViaCache(cp);
        }

        totalWidth += w;

        if (it == beg)
        {
            break;
        }

        const auto it2 = utf16PrevOrFFFD(it, beg, cp);
        const auto lead = ucdLookup(cp);
        state = ucdGraphemeJoins(state, lead, trail);

        if (ucdGraphemeDone(state))
        {
            break;
        }

        it = it2;
        trail = lead;
    }

    *width = totalWidth < 1 ? 1 : (totalWidth > 2 ? 2 : totalWidth);
    return it - beg;
}

size_t CodepointWidthDetector::_graphemeNextOld(const std::wstring_view& str, size_t offset, int* width) noexcept
{
    const auto beg = str.begin();
    const auto end = str.end();
    auto it = beg + std::min(offset, str.size());

    if (it == end)
    {
        return 0;
    }

    char32_t cp;
    it = utf16NextOrFFFD(it, end, cp);

    if (width)
    {
        *width = _getWidthOld(cp);
    }

    return it - beg;
}

size_t CodepointWidthDetector::_graphemePrevOld(const std::wstring_view& str, size_t offset, int* width) noexcept
{
    const auto beg = str.begin();
    auto it = beg + std::min(offset, str.size());

    if (it == beg)
    {
        return 0;
    }

    char32_t cp;
    it = utf16PrevOrFFFD(it, beg, cp);

    if (width)
    {
        *width = _getWidthOld(cp);
    }

    return it - beg;
}

int CodepointWidthDetector::_getWidthOld(const char32_t codepoint) noexcept
{
#pragma warning(suppress : 26447) // The function is declared 'noexcept' but calls function 'lower_bound<...>()' which may throw exceptions (f.6).
    const auto it = std::lower_bound(s_wideAndAmbiguousTable.begin(), s_wideAndAmbiguousTable.end(), codepoint);
    int width = 1;

    if (it != s_wideAndAmbiguousTable.end() && codepoint >= it->lowerBound && codepoint <= it->upperBound)
    {
        width = 2;
        if (it->isAmbiguous)
        {
            width = _checkFallbackViaCache(codepoint);
        }
    }

    return width;
}

// Call the function specified via SetFallbackMethod() to turn CodepointWidth::Ambiguous into Narrow/Wide.
// Caches the results in _fallbackCache. This is _lookupGlyphWidth's even-slower-path.
__declspec(noinline) int CodepointWidthDetector::_checkFallbackViaCache(const char32_t codepoint) noexcept
try
{
    // Ambiguous glyphs are considered narrow by default. See microsoft/terminal#2066 for more info.
    if (!_pfnFallbackMethod)
    {
        return 1;
    }

    if (const auto it = _fallbackCache.find(codepoint); it != _fallbackCache.end())
    {
        return it->second;
    }

    wchar_t buf[2];
    size_t len = 0;
    if (codepoint <= 0xffff)
    {
        buf[0] = static_cast<wchar_t>(codepoint);
        len = 1;
    }
    else
    {
        buf[0] = static_cast<wchar_t>((codepoint >> 10) + 0xD7C0);
        buf[1] = static_cast<wchar_t>((codepoint & 0x3ff) | 0xDC00);
        len = 2;
    }

    const uint8_t width = _pfnFallbackMethod({ &buf[0], len }) ? 2 : 1;
    _fallbackCache.insert_or_assign(codepoint, width);
    return width;
}
catch (...)
{
    LOG_CAUGHT_EXCEPTION();
    return 1;
}

// Method Description:
// - Sets a function that should be used as the fallback mechanism for
//      determining a particular glyph's width, should the glyph be an ambiguous
//      width.
//   A Terminal could hook in a Renderer's IsGlyphWideByFont method as the
//      fallback to ask the renderer for the glyph's width (for example).
// Arguments:
// - pfnFallback - the function to use as the fallback method.
// Return Value:
// - <none>
void CodepointWidthDetector::SetFallbackMethod(std::function<bool(const std::wstring_view&)> pfnFallback) noexcept
{
    _pfnFallbackMethod = std::move(pfnFallback);
}

// Method Description:
// - Resets the internal ambiguous character width cache mechanism
//   since it will be different when the font changes and we should
//   re-query the new font for that information.
// Arguments:
// - <none>
// Return Value:
// - <none>
void CodepointWidthDetector::ClearFallbackCache() noexcept
{
#pragma warning(suppress : 26447) // The function is declared 'noexcept' but calls function 'clear()' which may throw exceptions (f.6).
    _fallbackCache.clear();
}
